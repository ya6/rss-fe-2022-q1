{"version":3,"file":"main.js","mappings":"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","sources":["webpack://my-webpack-project/./src/components/controller/loader.ts","webpack://my-webpack-project/./src/components/controller/controller.ts","webpack://my-webpack-project/./src/components/view/appView.ts","webpack://my-webpack-project/./src/components/view/news/news.ts","webpack://my-webpack-project/./src/components/view/sources/sources.ts","webpack://my-webpack-project/./src/index.ts","webpack://my-webpack-project/./src/components/app/app.ts","webpack://my-webpack-project/./src/components/controller/appLoader.ts"],"sourcesContent":["enum EndpointEnum {\n  Sources = 'sources',\n  Everything = 'everything',\n  Empty = '',\n\n}\n\ntype OptionsType = {\n    [key: string]: string\n}\n\ninterface NewsDataType {\n status: string, totalResults: number, articles: object[] }\n\ninterface ILoader {\n  getResp: ({ endpoint, options }: {\n    endpoint: EndpointEnum;\n    options: OptionsType;\n  }, callback?: () => void) => void\n  errorHandler: (res: Response) => Response\n  makeUrl: (options: OptionsType, endpoint: EndpointEnum) => string\n  load: (method: string, endpoint: EndpointEnum, callback: ()=>void, options?: OptionsType) => void\n\n}\n\nclass Loader<T extends string, U extends OptionsType> implements ILoader { // typing class\n  private baseLink: T;\n  private options: U;\n\n  constructor(baseLink: T, options: U) {\n    this.baseLink = baseLink;\n    this.options = options;\n  }\n\n  public getResp(\n    { endpoint = EndpointEnum.Empty, options = {} },\n    callback = () => {\n      console.error('No callback for GET response');\n    },\n  ): void {\n    this.load('GET', endpoint, callback, options);\n  }\n\n  public errorHandler(res: Response): Response {\n    if (!res.ok) {\n      if (res.status === 401 || res.status === 404) { console.log(`Sorry, but there is ${res.status} error: ${res.statusText}`); }\n      throw Error(res.statusText);\n    }\n\n    return res;\n  }\n\n  public makeUrl(options: OptionsType, endpoint: EndpointEnum): string {\n    const urlOptions: OptionsType = { ...this.options, ...options };\n    let url = `${this.baseLink}${endpoint}?`;\n\n    Object.keys(urlOptions).forEach((key) => {\n      const value: string = urlOptions[key];\n      url += `${key}=${value}&`;\n    });\n\n    return url.slice(0, -1);\n  }\n\n  public load(\n    method: string,\n    endpoint: EndpointEnum,\n    callback: (data?: NewsDataType)=>void,\n    options = {},\n  ): void {\n    fetch(this.makeUrl(options, endpoint), { method })\n      .then(this.errorHandler)\n      .then((res) => {\n        const rez: Promise<NewsDataType> = res.json(); // Generic Promise\n\n        return rez;\n      })\n      .then((data) => callback(data))\n      .catch((err) => console.error(err));\n  }\n}\n\nexport default Loader;\n","import AppLoader from './appLoader';\n\nenum EndpointEnum {\n  Sources = 'sources',\n  Everything = 'everything',\n\n}\n\ntype NewsSourcesType = {\n status: string, sources: object[] }\n\ninterface IAppController {\n  getSources: (callback: (data?: NewsSourcesType) => void) => void\n  getNews: (e: Event, callback: () => void) => void\n}\n\nclass AppController extends AppLoader implements IAppController {\n  public getSources(callback: (data?: NewsSourcesType) => void) {\n    super.getResp(\n      {\n        endpoint: EndpointEnum.Sources,\n      },\n      callback,\n    );\n  }\n\n  public getNews(e: Event, callback: () => void): void {\n    let target = e.target as HTMLElement;\n    const newsContainer: HTMLElement = e.currentTarget as HTMLElement;\n\n    while (target !== newsContainer && target !== null && newsContainer !== null) {\n      if (target.classList.contains('source__item')) {\n        const sourceId: string | null = target.getAttribute('data-source-id');\n        if (newsContainer.getAttribute('data-source') !== sourceId) {\n          newsContainer.setAttribute('data-source', sourceId!);\n          super.getResp(\n            {\n              endpoint: EndpointEnum.Everything,\n              options: {\n                sources: sourceId,\n              },\n            },\n            callback,\n          );\n        }\n        return;\n      }\n      target = target.parentNode as HTMLElement;\n    }\n  }\n}\n\nexport default AppController;\n","import News from './news/news';\nimport Sources from './sources/sources';\n\ntype NewsDataType = {\n status: string, totalResults: number, articles: object[] }\n\ntype NewsSourcesType = {\n status: string, sources: object[] }\n\ninterface IAppView {\n  drawNews: (data: NewsDataType) => void\n  drawSources: (data: NewsSourcesType) => void\n}\n\nexport class AppView implements IAppView {\n  private readonly news: News;\n  private sources: Sources;\n\n  constructor() {\n    this.news = new News();\n    this.sources = new Sources();\n  }\n\n  public drawNews(data: NewsDataType) {\n    const values: object[] = data?.articles ? data?.articles : [];\n    this.news.draw(values);\n  }\n\n  public drawSources(data: NewsSourcesType) {\n    const values: object[] = data?.sources ? data?.sources : [];\n    this.sources.draw(values);\n  }\n}\n\nexport default AppView;\n","import './news.css';\n\ninterface INews {\n  draw(data: object[]): void\n}\n\ninterface theNewsType {\nauthor: string,\ncontent1: string;\ndescription: string,\npublishedAt: string,\nsource: { id: string, name: string },\ntitle: string,\nurl: string\nurlToImage: string\n}\n\nclass News implements INews {\n  public draw(data: object[]) {\n    const news: Array<object> = data.length >= 10 ? data\n      .filter((_: {}, idx: number) => idx < 10) : data;\n\n    const fragment = document.createDocumentFragment() as DocumentFragment;\n    const newsItemTemp = document.querySelector('#newsItemTemp') as HTMLTemplateElement;\n\n    news.forEach((item:Partial<theNewsType>, idx: number) => { // Partial\n      // news.forEach((item: {publishedAt?: string; urlToImage?: string;\n      //     author?: string; source?: {name: string}; title?: string;\n      //     description?: string; url?: string }, idx: number) => {\n\n      const newsClone = newsItemTemp.content.cloneNode(true) as HTMLTemplateElement;\n\n      if (idx % 2) newsClone.querySelector('.news__item')!.classList.add('alt');\n\n      newsClone.querySelector<HTMLElement>('.news__meta-photo')!.style.backgroundImage = `url(${item.urlToImage || 'img/news_placeholder.jpg'})`;\n      newsClone.querySelector('.news__meta-author')!.textContent = item.author || item.source!.name;\n      newsClone.querySelector('.news__meta-date')!.textContent = item.publishedAt!\n        .slice(0, 10)\n        .split('-')\n        .reverse()\n        .join('-');\n\n      newsClone.querySelector('.news__description-title')!.textContent = item.title!;\n      newsClone.querySelector('.news__description-source')!.textContent = item.source!.name;\n      newsClone.querySelector('.news__description-content')!.textContent = item.description!;\n      newsClone.querySelector('.news__read-more a')!.setAttribute('href', item.url!);\n\n      fragment.append(newsClone);\n    });\n\n    document.querySelector('.news')!.innerHTML = '';\n    document.querySelector('.news')!.appendChild(fragment);\n  }\n}\n\nexport default News;\n","import './sources.css';\n\ninterface theNewsType {\nid: string,\nname: string,\ndescription: string,\nurl: string,\ncategory: string,\nlanguage: string,\ncountry: string,\n}\n type nameType = Pick<theNewsType, 'name'>; // Pick\n type idType = Pick<theNewsType, 'id'>;\n type descType = Pick<theNewsType, 'description'>;\n\ninterface ISources {\n draw: (data: Array<object>) => void // Generic\n}\n\nclass Sources implements ISources {\n  public draw(data: Array<object>) {\n    const fragment = document.createDocumentFragment() as DocumentFragment;\n    const sourceItemTemp = document.querySelector('#sourceItemTemp') as HTMLTemplateElement;\n\n    // data.forEach((item: Partial<theNewsType>) => {\n    // data.forEach((item: {name?: string; id?: string}) => {\n    data.forEach((item: {name?: nameType; id?: idType; description?: descType }) => {\n      const sourceClone = sourceItemTemp.content.cloneNode(true) as HTMLTemplateElement;\n      sourceClone!.querySelector('.source__item-name')!.textContent = `${item.name!}`;\n      sourceClone!.querySelector('.source__item')!.setAttribute('data-source-id', `${item.id!}`);\n      sourceClone!.querySelector('.source__item')!.setAttribute('data-source-desc', `${item.description!}`);\n\n      fragment.append(sourceClone);\n    });\n\n    document.querySelector('.sources')!.append(fragment);\n  }\n}\n\nexport default Sources;\n","import App from './components/app/app';\nimport './global.css';\n\nconst app: App = new App();\napp.start();\n","import AppController from '../controller/controller';\nimport { AppView } from '../view/appView';\n\ntype NewsSourcesType = {\n status: string, sources: object[] }\n\ntype NewsDataType = {\n status: string, totalResults: number, articles: object[] }\n\ninterface IApp {\n  start: () => void\n}\n\nclass App implements IApp {\n  private controller: AppController;\n  private view: AppView;\n\n  constructor() {\n    this.controller = new AppController();\n    this.view = new AppView();\n  }\n\n  public start(): void {\n    const container = document\n      .querySelector('.sources');\n    const tooltip = document\n      .querySelector('.tooltip');\n    container!.addEventListener('mouseover', (e) => {\n      const target = e.target as HTMLElement;\n      if (target.nodeName === 'DIV' && target.classList.contains('source__item')) {\n        const desc = `${target.dataset.sourceDesc}`;\n         tooltip!.classList.remove('hidden');\n        tooltip!.textContent = desc;\n      }\n    });\n   container!.addEventListener('mouseout', (e) => {\n     const target = e.target as HTMLElement;\n     if (target.nodeName === 'DIV' && target.classList.contains('source__item')) {\n       tooltip!.classList.add('hidden');\n         tooltip!.textContent = '';\n     }\n   });\n    container!\n      .addEventListener('click', (e) => this.controller.getNews(e, (data?: NewsDataType) => this.view.drawNews(data!)));\n    this.controller.getSources((data?: NewsSourcesType) => this.view.drawSources(data!));\n  }\n}\n\nexport default App;\n","import Loader from './loader';\n\ntype OptionsType = {\n    [key: string]: string\n}\n\nclass AppLoader extends Loader<string, OptionsType> {\n  constructor() {\n    // super('', {\n    // super('https://newsapi.org/v2/', {\n    super('https://nodenews.herokuapp.com/', {\n      // apiKey: 'cd32042d4b8845fbba3c53ed2d341562', // get yours key https://newsapi.org/ old\n      apiKey: 'eb0f5088f06a4301bab53e7b8e997aa6', // get yours key https://newsapi.org/ new\n    });\n  }\n}\n\nexport default AppLoader;\n"],"names":["EndpointEnum","AppView","constructor","this","news","draw","data","length","filter","_","idx","fragment","document","createDocumentFragment","newsItemTemp","querySelector","forEach","item","newsClone","content","cloneNode","classList","add","style","backgroundImage","urlToImage","textContent","author","source","name","publishedAt","slice","split","reverse","join","title","description","setAttribute","url","append","innerHTML","appendChild","sources","sourceItemTemp","sourceClone","id","drawNews","values","articles","drawSources","controller","baseLink","options","getResp","endpoint","Empty","callback","console","error","load","errorHandler","res","ok","status","log","statusText","Error","makeUrl","urlOptions","Object","keys","key","value","method","fetch","then","json","catch","err","super","apiKey","getSources","Sources","getNews","e","target","newsContainer","currentTarget","contains","sourceId","getAttribute","Everything","parentNode","view","start","container","tooltip","addEventListener","nodeName","desc","dataset","sourceDesc","remove"],"sourceRoot":""}